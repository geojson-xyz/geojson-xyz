#!/usr/bin/env node

var inquirer = require('inquirer'),
  fs = require('fs'),
  chalk = require('chalk'),
  toClipboard = require('to-clipboard'),
  geojsonStream = require('geojson-stream'),
  queue = require('queue-async'),
  choices = require('./lib/choices'),
  xyz = require('./'),
  argv = require('yargs')
    .usage('Get GeoJSON\n$0')
    .boolean('list')
    .boolean('all')
    .describe('all', 'Get data from all files matching your search.')
    .default('all', false)
    .describe('filter', 'When the search matches a feature name within a file, filter that file\'s data down to the matching feature or features.')
    .default('filter', true)
    .help('help')
    .argv;

var license = 'SOURCE: http://www.naturalearthdata.com/ Public Domain (no restrictions)';

var options = {
  all: argv.all,
  filter: argv.filter,
  list: argv.list
};

if (options.list) {
  var data = require('geojson-xyz-data')['naturalearth-3.3.0'];
  data.files.forEach(function (file) {
    console.log(file.url);
  });
  return;
}

if (argv._[0]) {
  var stream;
  if (argv._[1] === '-' || !process.stdout.isTTY) {
    stream = geojsonStream.stringify();
    stream.pipe(process.stdout);
  }

  xyz.getGeoJSON(argv._[0], argv, function (err, results) {
    if (err) throw new Error(err);
    if (argv.metadataOnly) { return console.log(JSON.stringify(results, null, 2)); }

    var q = queue();
    results.forEach(function (result) {
      q.defer(function (done) {
        xyz.getURL(result.file.url, function (err, data) {
          if (err) return done(err);

          if (options.filter && result.featureMatch && data.type === 'FeatureCollection') {
            data.features = data.features.filter(function (feat) {
              return result.featureMatch.some(function (featureMatch) {
                // manually iterate properties so we can be insensitive to letter
                // case of keys
                for (var key in feat.properties) {
                  if (key.toLowerCase() === featureMatch.property.toLowerCase()
                      && feat.properties[key] === featureMatch.value) {
                    return true;
                  }
                }
                return false;
              });
            });
          }

          if (stream) {
            var features = data.type === 'FeatureCollection' ? data.features : [data];
            features.forEach(function (feat) { stream.write(feat); });
          } else {
            console.log(chalk.green('✓ ') + chalk.bold('saved as ' + result.file.name));
            console.log(license);
            fs.writeFileSync(result.file.name, JSON.stringify(data));
          }

          done();
        });
      });
    });

    q.awaitAll(function (err) {
      if (err) throw new Error(err);
      if (stream) { stream.end(); }
    });
  });
  return;
}

inquirer.prompt(choices(options), function(answers) {
  if (answers.output === 'URL to Clipboard') {
    toClipboard(answers.file.url);
    console.log('');
    console.log(chalk.green('✓ ') + chalk.bold('copied url to clipboard'));
    console.log(answers.file.url);
    console.log(license);
  } else {
    xyz.getURL(answers.file.url, function(err, result) {
      fs.writeFileSync(answers.file.name, JSON.stringify(result));
      console.log('');
      console.log(chalk.green('✓ ') + chalk.bold('saved as ' + answers.file.name));
      console.log(license);
    });
  }
});
